/*
SCSS variables are information about icon's compiled state, stored under its original file name

.icon-home {
  width: $icon-home-width;
}

The large array-like variables contain all information about a single icon
$icon-home: x y offset_x offset_y width height total_width total_height image_path;

At the bottom of this section, we provide information about the spritesheet itself
$spritesheet: width height image $spritesheet-sprites;
*/
$ico-demodemo-name: 'ico-demodemo';
$ico-demodemo-x: 0px;
$ico-demodemo-y: 0px;
$ico-demodemo-offset-x: 0px;
$ico-demodemo-offset-y: 0px;
$ico-demodemo-width: 17px;
$ico-demodemo-height: 17px;
$ico-demodemo-total-width: 35px;
$ico-demodemo-total-height: 32px;
$ico-demodemo-image: '~sprites/ico.png';
$ico-demodemo: (0px, 0px, 0px, 0px, 17px, 17px, 35px, 32px, '~sprites/ico.png', 'ico-demodemo', );
$ico-hover-hover-ico-hover-hover-name: 'ico-hover:hover,.ico-hover-hover';
$ico-hover-hover-ico-hover-hover-x: 17px;
$ico-hover-hover-ico-hover-hover-y: 0px;
$ico-hover-hover-ico-hover-hover-offset-x: -17px;
$ico-hover-hover-ico-hover-hover-offset-y: 0px;
$ico-hover-hover-ico-hover-hover-width: 18px;
$ico-hover-hover-ico-hover-hover-height: 15px;
$ico-hover-hover-ico-hover-hover-total-width: 35px;
$ico-hover-hover-ico-hover-hover-total-height: 32px;
$ico-hover-hover-ico-hover-hover-image: '~sprites/ico.png';
$ico-hover-hover-ico-hover-hover: (17px, 0px, -17px, 0px, 18px, 15px, 35px, 32px, '~sprites/ico.png', 'ico-hover:hover,.ico-hover-hover', );
$ico-hover-name: 'ico-hover';
$ico-hover-x: 0px;
$ico-hover-y: 17px;
$ico-hover-offset-x: 0px;
$ico-hover-offset-y: -17px;
$ico-hover-width: 18px;
$ico-hover-height: 15px;
$ico-hover-total-width: 35px;
$ico-hover-total-height: 32px;
$ico-hover-image: '~sprites/ico.png';
$ico-hover: (0px, 17px, 0px, -17px, 18px, 15px, 35px, 32px, '~sprites/ico.png', 'ico-hover', );
$ico-width: 35px;
$ico-height: 32px;
$ico-image: '~sprites/ico.png';
$ico-sprites: ($ico-demodemo, $ico-hover-hover-ico-hover-hover, $ico-hover, );
$ico: (35px, 32px, '~sprites/ico.png', $ico-sprites, );

/*
The provided mixins are intended to be used with the array-like variables

.icon-home {
  @include sprite-width($icon-home);
}

.icon-email {
  @include sprite($icon-email);
}

Example usage in HTML:

`display: block` sprite:
<div class="icon-home"></div>

To change `display` (e.g. `display: inline-block;`), we suggest using a common CSS class:

// CSS
.icon {
  display: inline-block;
}

// HTML
<i class="icon icon-home"></i>
*/
@mixin sprite-width($sprite) {
  width: nth($sprite, 5);
}

@mixin sprite-height($sprite) {
  height: nth($sprite, 6);
}

@mixin sprite-position($sprite) {
  $sprite-offset-x: nth($sprite, 3);
  $sprite-offset-y: nth($sprite, 4);
  background-position: $sprite-offset-x  $sprite-offset-y;
}

@mixin sprite-image($sprite) {
  $sprite-image: nth($sprite, 9);
  background-image: url(#{$sprite-image});
}

@mixin sprite($sprite) {
  @include sprite-image($sprite);
  @include sprite-position($sprite);
  @include sprite-width($sprite);
  @include sprite-height($sprite);
}

/*
The `sprites` mixin generates identical output to the CSS template
  but can be overridden inside of SCSS

@include sprites($spritesheet-sprites);
*/
@mixin sprites($sprites) {
  @each $sprite in $sprites {
    $sprite-name: nth($sprite, 10);
    .#{$sprite-name} {
      @include sprite($sprite);
    }
  }
}
